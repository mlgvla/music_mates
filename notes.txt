
Sprint 1
Finish Edit Page
[x]   - add placeholders to edit boxes
[x]   - populate checkboxes with user_instrument values on edit form
[x]   - redo visibility attribute type to string - public or private - public default
[x]   - Write PATCH route
[x]   - Create Show Page
[x]   - Delete User Account - make sure to also delete UserInstruments for User.
            - use destroy flag for :user_instruments https://guides.rubyonrails.org/association_basics.html

Sprint 2
[x] - Consider Navbar for Search and Logout
Activate Flash Messages - finish "you must be logged in"

Sprint 3
[x]   - Implement Find by Instrument/public only - UserInstrument Controller


TODOS

[x] - change visibility data type to string, rename to visibility
[x] - add user_instrument data to seed file
[x] - remove levels attribute from user_instrument table if not implemented in this version
[x] - fix bug where situation where no checkboxes are checked
[x] - make instrument list on musician show page hyperlinks
[ ] - use Bootstrap lists on Instrument show page and Profile pages (for instruments)
[ ] - use instrument index as a landing page after login
[x] - no access to all but welcome page without login - refer to Mixshare
[x] - don't show private users
[x] - test for empty fields in sign up and log in - send flash messages
[x] - uniqueness of login credentials
[ ] - contributor's guide
[x] - sort by last name when showing musicians
[x] - add flash error to incorrect edit submit - redirect back to edit page
[ ] - order instruments list on profile page by instrument table order

- consider level a stretch feature for next version

- insert authentication_required call before user routes to generate flash notices



SAMPLE SEARCHES 

Finding Users by Instrument:
Example:
    - User.joins(:user_instruments).where(user_instruments: {instrument_id: 2})

Assigning a level to a UserInstrument
    - Must use ActiveRecord Extensions to do it semantically.

    - otherwise, must retrieve user and instrument ids and retrieve a UserInstrument Object explicitly, then assign level to level attribute

Update a level to a UserInstrument

    - UserInstrument.all[2].update(level: "Professional") or as in first example

Finding players by level

    - UserInstrument.where(level: "Professional") or as in first example

Finding players by instument and level

    - UserInstrument.where("instrument_id = ? AND level = ?", 2, "Professional") or as in first example

